\" TaskFarmer man page
.if !\n(.g \{\
.	if !\w|\*(lq| \{\
.		ds lq ``
.		if \w'\(lq' .ds lq "\(lq
.	\}
.	if !\w|\*(rq| \{\
.		ds rq ''
.		if \w'\(rq' .ds rq "\(rq
.	\}
.\}
.de Id
.ds Dt \\$4
..
.Id $Id: taskfarmer.1,v 1.00 2013/07/11 12:25:32 lester Exp $
.TH TASKFARMER 1 \*(Dt "Lester Hedges"
.SH NAME
TaskFarmer \- a simple task farmer for serial mpirun jobs.
.SH SYNOPSIS
.B mpirun
-np
.I CORES
.B taskfarmer
.OP \-f FILE
.br
.B mpirun
-np
.I CORES
.B taskfarmer
.OP \-f FILE
.OP \-h
.OP \-v
.OP \-w
.OP \-s SLEEP_TIME
.SH DESCRIPTION
.PP
Execute a list of system commands from a job file one-by-one. This allows
many simulations to be run within a single mpirun allocation. A new job is
launched whenever a process becomes available, hence ensuring 100% utilization
of the cores for the duration of the wall time, or until the job file is
empty, whichever occurs first. This is useful for running many short
simulations on a small number of cores, or to avoid resource wastage when
individual simulations have markedly different run times. The job file can
be updated dynamically, allowing simulations to be added or deleted as
required.
.PP
A master-worker type scenario is avoided by exploiting a file lock. This
ensures that only one process has access to the job file at any given time.
.PP
The order of operations is as follows:
.IP \[bu]
A process opens the job file and obtains an exclusive lock.
.IP \[bu]
All jobs are read into a buffer.
.IP \[bu]
First job is read and buffer is truncated.
.IP \[bu]
Truncated buffer is written back to the file.
.IP \[bu]
File is unlocked and closed (other processes can now access it).
.IP \[bu]
Job is launched.
.SH OPTIONS
.B
TaskFarmer
supports the following short- and long-form command-line options. Invoking
.B taskfarmer
with no options will print a help message.
.TP
.BR \-h ", " \-\^\-help
Print the help message.
.TP
.BI \-f " FILE" "\fR,\fP \-\^\-file "FILE
Where
.I FILE
is the path to the job file (required).
.TP
.BI \-v " " "\fR,\fP \-\^\-verbose
Activate verbose mode (status updates are written to stdout).
.TP
.BI \-w " " "\fR,\fP \-\^\-wait-on-idle
TaskFarmer waits for more jobs when idle.
.TP
.BI \-s " SLEEP_TIME" "\fR,\fP \-\^\-sleep-time "SLEEP_TIME
Sleep duration when idle (seconds).
.SH USAGE
It is possible to change the state of idle cores using the
.B --wait-on-idle
option. When set, a core will sleep for a specified period of time if it
cannot find a job to execute. After the waiting period the process will
check whether more jobs have been added to the job file. The amount of time
that a process sleeps for can be changed with the
.B --sleep-time
option, the default is 300 seconds. This cycle will continue until the wall
time is reached. By default
.B wait-on-idle
is deactivated meaning that each process exits when the job file is empty.
.SH TIPS
System commands in the job file should redirect their standard output
to a separate log file to avoid littering the standard output of
.B TaskFarmer
itself. As an example, the job file could contain a command like
.IP
.B echo
"Hello, I'm a job" > job.log
.PP
with
.B TaskFarmer
launched as follows
.IP
.B mpirun
-np 4 \fBtaskfarmer
.B -f
jobs.txt > sched.log
.SH WORDS OF CAUTION
.IP \[bu]
When individual simulations are very short it is probably dangerous to
modify the job file externally as it will likely conflict with TaskFarmer's
I/O. The file should only be modified when all cores are active (running jobs)
or in an idle state (job file is emtpy). It is recommended to modify the job
file using a redirection, rather than opening it and editing directly,
e.g.
.B
cat
more_jobs >> jobs.txt
.IP \[bu]
For clusters that don't impose a wall time,
.B
TaskFarmer
provides a way of running an infinite number of jobs. As long as the job
file isn't empty jobs will continue to be launched on free cores within the
allocation. Use your new power wisely!
.SH BUGS
.PP
Email bugs and comments to
.BR lester.hedges@gmail.com .
