\" TaskFarmer man page
.if !\n(.g \{\
.   if !\w|\*(lq| \{\
.       ds lq ``
.       if \w'\(lq' .ds lq "\(lq
.   \}
.   if !\w|\*(rq| \{\
.       ds rq ''
.       if \w'\(rq' .ds rq "\(rq
.   \}
.\}
.de Id
.ds Dt \\$4
..
.Id $Id: taskfarmer.1,v 1.00 2013/07/11 12:25:32 lester Exp $
.TH TASKFARMER 1 \*(Dt "Lester Hedges"
.SH NAME
TaskFarmer \- a simple task farmer for serial mpirun tasks.
.SH SYNOPSIS
.B mpirun
-np
.I CORES
.B taskfarmer
.OP \-f FILE
.br
.B mpirun
-np
.I CORES
.B taskfarmer
.OP \-f FILE
.OP \-h
.OP \-v
.OP \-w
.OP \-r
.OP \-s SLEEP_TIME
.OP \-m MAX_RETRIES
.SH DESCRIPTION
.PP
Execute a list of system commands from a task file one-by-one. This allows
many simulations to be run within a single mpirun allocation. A new task is
launched whenever a process becomes available, hence ensuring 100% utilization
of the cores for the duration of the wall time, or until the task file is
empty, whichever occurs first. This is useful for running many short
simulations on a small number of cores, or to avoid resource wastage when
individual simulations have markedly different run times. The task file can
be updated dynamically, allowing simulations to be added or deleted as
required.
.PP
A master-worker type scenario is avoided by exploiting a file lock. This
ensures that only one process has access to the task file at any given time.
.PP
The order of operations is as follows:
.IP \[bu]
A process opens the task file and obtains an exclusive lock.
.IP \[bu]
All tasks are read into a buffer.
.IP \[bu]
First task is read and buffer is truncated.
.IP \[bu]
Truncated buffer is written back to the file.
.IP \[bu]
File is unlocked and closed (other processes can now access it).
.IP \[bu]
task is launched.
.SH OPTIONS
.B
TaskFarmer
supports the following short- and long-form command-line options. Invoking
.B taskfarmer
with no options will print a help message.
.TP
.BR \-h ", " \-\^\-help
Print the help message.
.TP
.BI \-f " FILE" "\fR,\fP \-\^\-file "FILE
Where
.I FILE
is the path to the task file (required).
.TP
.BI \-v " " "\fR,\fP \-\^\-verbose
Activate verbose mode (status updates are written to stdout).
.TP
.BI \-w " " "\fR,\fP \-\^\-wait-on-idle
TaskFarmer waits for more tasks when idle.
.TP
.BI \-r " " "\fR,\fP \-\^\--retry
TaskFarmer retries failed tasks.
.TP
.BI \-s " SLEEP_TIME" "\fR,\fP \-\^\-sleep-time "SLEEP_TIME
Sleep duration when idle (seconds).
.TP
.BI \-m " MAX_RETRIES" "\fR,\fP \-\^\-max-retries "MAX_RETRIES
Maximum number of times to retry a failed task.
.SH USAGE
It is possible to change the state of idle cores using the
.B --wait-on-idle
option. When set, a core will sleep for a specified period of time if it
cannot find a task to execute. After the waiting period the process will
check whether more tasks have been added to the task file. The amount of time
that a process sleeps for can be changed with the
.B --sleep-time
option, the default is 300 seconds. This cycle will continue until the wall
time is reached. By default
.B wait-on-idle
is deactivated meaning that each process exits when the task file is empty.
.P
The
.B --retry
and
.B --max-retries
options allow
.B TaskFarmer
to relaunch any failed tasks up to a maximum number of attempts. The default
number of retries is 10.
.SH TIPS
System commands in the task file should redirect their standard output
to a separate log file to avoid littering the standard output of
.B TaskFarmer
itself. As an example, the task file could contain a command like
.IP
.B echo
"Hello, I'm a task" > job.log
.PP
with
.B TaskFarmer
launched as follows
.IP
.B mpirun
-np 4 \fBtaskfarmer
.B -f
tasks.txt > sched.log
.PP
The
.B wc
command-line utility is handy for checking the number of remaining
tasks in a task file without the need to trawl through any of
.B TaskFarmer's
logs. For example, if task files are stored in a directory called
.B task_files
then the following command will provide a concise output showing the number of
remaining tasks in each file as well as the total.
.IP
.B wc -l
task_files/*
.PP
Since tasks are read from the task file line-by-line it is possible to
introduce dependencies between tasks by placing multiple tasks on a single
line separated by semicolons. For example
.IP
perform_calculation > data.txt; analyze_data < data.txt
.SH WORDS OF CAUTION
.IP \[bu]
When individual simulations are very short it is probably dangerous to
modify the task file externally as it will likely conflict with TaskFarmer's
I/O. The file should only be modified when all cores are active (running tasks)
or in an idle state (task file is emtpy). It is recommended to modify the task
file using a redirection, rather than opening it and editing directly,
e.g.
.B
cat
more_tasks >> tasks.txt
.IP \[bu]
Clusters that use InfiniBand interconnects can cause problems when using fork()
in OpenMPI. A workaround can be achieved by disabling InfiniBand support for
fork by setting the following (BASH style) environment variables:
.IP
.B export
OMPI_MCA_mpi_warn_on_fork=0
.IP
.B export
OMPI_MCA_btl_openib_want_fork_support=0
.IP \[bu]
At present, when the
.B --retry
option is set, failed tasks are only relaunched by the same process on which they
failed. This is fine when task failures are caused by buggy or unstable code,
but is unlikely to help when failure results from a bad core or node on a
cluster.
.IP \[bu]
Very large task files containing complex shell commands can be problematic
since each process needs to be able to load the file to memory. This
problem can be mitigated through judicious choice of command names
(e.g. using short form options) and use of relative paths where possible.
.IP \[bu]
For clusters that don't impose a wall time,
.B
TaskFarmer
provides a way of running an infinite number of tasks. As long as the task
file isn't empty tasks will continue to be launched on free cores within the
allocation. Use your new power wisely!
.SH BUGS
.PP
Email bugs and comments to
.BR lester.hedges@gmail.com .
